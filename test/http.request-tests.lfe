(defmodule http.request-tests
  (behaviour ltest-unit))

(include-lib "ltest/include/ltest-macros.lfe")

(deftest new-1
  (let* ((req (http.request:new "http://example.com/"))
         (sorted (http.request:to-list req)))
    ; (is-equal #"" (proplists:get_value 'body sorted))
    ; (is-equal '() (proplists:get_value 'headers sorted))
    ; (is-equal 'GET (proplists:get_value 'method sorted))
    ; (is-equal '(#(fragment #"")
    ;             #(host #"example.com")
    ;             #(password #"")
    ;             #(path #"/")
    ;             #(port #"")
    ;             #(query #"")
    ;             #(scheme #"http")
    ;             #(user #"")
    ;             #(userinfo #""))
    ;          (proplists:get_value 'url-parsed sorted))
    ; (is-equal '() (proplists:get_value 'path-segments sorted))
    ; (is-equal '() (proplists:get_value 'query-parsed sorted))
    ; (is-equal #"http://example.com/" (proplists:get_value 'url sorted))
    ; (is-equal 1.1 (proplists:get_value 'version sorted))
    (is-equal '(#(body #"")
                #(headers ())
                #(method GET)
                #(path-segments ())
                #(query-parsed ())
                #(remote-addr #"")
                #(url #"http://example.com/")
                #(url-parsed (#(fragment #"")
                              #(host #"example.com")
                              #(password #"")
                              #(path #"/")
                              #(port #"")
                              #(query #"")
                              #(scheme #"http")
                              #(user #"")
                              #(userinfo #"")))
                #(version 1.1))
              sorted)
              ))

(deftest new-2
  (let* ((req (http.request:new 'POST "http://example.com/"))
         (sorted (http.request:to-list req)))
    (is-equal '(#(body #"")
                #(headers ())
                #(method POST)
                #(path-segments ())
                #(query-parsed ())
                #(remote-addr #"")
                #(url #"http://example.com/")
                #(url-parsed (#(fragment #"")
                              #(host #"example.com")
                              #(password #"")
                              #(path #"/")
                              #(port #"")
                              #(query #"")
                              #(scheme #"http")
                              #(user #"")
                              #(userinfo #"")))
                #(version 1.1))
              sorted)))

(deftest new-3
  (let* ((req (http.request:new 'POST "http://example.com/" #"stuff"))
         (sorted (http.request:to-list req)))
    (is-equal '(#(body #"stuff")
                #(headers ())
                #(method POST)
                #(path-segments ())
                #(query-parsed ())
                #(remote-addr #"")
                #(url #"http://example.com/")
                #(url-parsed (#(fragment #"")
                              #(host #"example.com")
                              #(password #"")
                              #(path #"/")
                              #(port #"")
                              #(query #"")
                              #(scheme #"http")
                              #(user #"")
                              #(userinfo #"")))
                #(version 1.1))
              sorted)))

(deftest new-4
  (let* ((req (http.request:new 'POST
                                "http://example.com/"
                                #"stuff"
                                #m(content-type #"application/json")))
         (sorted (http.request:to-list req)))
    (is-equal '(#(body #"stuff")
                #(headers (#(content-type #"application/json")))
                #(method POST)
                #(path-segments ())
                #(query-parsed ())
                #(remote-addr #"")
                #(url #"http://example.com/")
                #(url-parsed (#(fragment #"")
                              #(host #"example.com")
                              #(password #"")
                              #(path #"/")
                              #(port #"")
                              #(query #"")
                              #(scheme #"http")
                              #(user #"")
                              #(userinfo #"")))
                #(version 1.1))
              sorted)))

(deftest new
  (let* ((req (maps:merge
               (http.request:new 'PUT
                                 "http://alice.roberts:sekr1t@example.com:5099/api/v1/thing?q=wut&flag=enabled#start")
               #m(remote-addr #"172.16.32.42")))
         (sorted (http.request:to-list req)))
    (is-equal '(#(body #"")
                #(headers ())
                #(method PUT)
                #(path-segments (#"api" #"v1" #"thing"))
                #(query-parsed (#(#"flag" #"enabled") #(#"q" #"wut")))
                #(remote-addr #"172.16.32.42")
                #(url #"http://alice.roberts:sekr1t@example.com:5099/api/v1/thing?q=wut&flag=enabled#start")
                #(url-parsed (#(fragment #"start")
                              #(host #"example.com")
                              #(password #"sekr1t")
                              #(path #"/api/v1/thing")
                              #(port #"5099")
                              #(query #"q=wut&flag=enabled")
                              #(scheme #"http")
                              #(user #"alice.roberts")
                              #(userinfo #"alice.roberts:sekr1t")))
                #(version 1.1))
              sorted)))
